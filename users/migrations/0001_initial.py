# Generated by Django 4.2 on 2023-04-25 10:14

import django.contrib.auth.validators
from django.db import migrations, models
import users.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='At least 3 chars and no more than 150 chars', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first_name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last_name')),
                ('gender', models.CharField(choices=[('f', 'female'), ('m', 'male')], help_text="'f'emale or 'm'ale", max_length=1, verbose_name='gender')),
                ('is_admin', models.BooleanField(default=False, editable=False, verbose_name='is_admin')),
                ('created_at', models.DateTimeField(auto_now=True, verbose_name='created_at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users list',
                'db_table': 'users',
                'ordering': ['username', 'email'],
            },
            bases=(models.Model, users.manager.CustomUserManager),
            managers=[
                ('objects', users.manager.CustomUserManager()),
            ],
        ),
    ]
